
Basic Implementation Language (BIL)
-----------------------------------

License
-------

    General Implementation Language (GIL) toolkit
    Copyright (C) 2019  Ekkehard Morgenstern

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

    E-Mail: ekkehard@ekkehardmorgenstern.de 
    Mail: Ekkehard Morgenstern, Mozartstr. 1, 76744 Woerth am Rhein, Germany, Europe

Requirements
------------

BIL is a minimal language to implement other languages or basic toolchains.

Language must be compilable to C or C++.
Implementation language doesn't matter but should also be C or C++.


Language Elements
-----------------


Literals
--------

123458          a decimal integer 
1232.3282       a decimal floating-point value 
1232.232e23     a decimal floating-point value 
"abc"           a string
true            a boolean value (bits all set to 1)
false           a boolean value (bits all set to 0)


Data Types
----------

Basic Types:
int             a 64 bit integer (signed)
real            a 64 bit floating-point value
string          a utf-8 encoded string
byte            an 8 bit byte (signed)
bool            a boolean value

Pointer Types:
type*           a pointer to a series of 'type' type cells
type^           a pointer to a class type 

Constant Types:
const type      a constant

Enumerations:
enum type {     an enumeration (only of basic types)

}

Cell spaces:

new type [ initialsize ]            create an auto-scaling cell space with a minimum size 
delete name                         delete cell space

Classes:

new type ( expression-list )        instantiate an object
delete name                         delete an object

class name [ extends name-list ] [ implements name-list ] {    a data structure or class

    [ readonly | writeonly | readwrite ] attribute name-list : type [ = expression-list ] ; 

    [ override ] method name ( name-list : type; ... ) returning type-list { ... }

}

interface name [ extends name-list ] {      an interface declaration

    [ override ] method name ( name-list : type; ... ) returns type-list;

}

Operators:

    + - * /                         basic arithmetic
    mod                             modulo
    
    and or xor not                  logical operators
    shl shr                         shift operators

    >= <= > < = <>                  comparison operators 

    [ n ]                           access cell space
    -> name                         access class member 

Programs:

program "progname"[,entrypoint]     This module constitutes a program (default entry point is main)

Modules:

module "modname"                    this module constitutes just a module

Library:

library "libname"                   this module constitutes a library

export identifier-list              this module exports specified identifiers

import "libormodname"[,"platform"][,"language"][,header-file-list][,identifier-list]   include a library 

TODO: Paragraph needs cleanup / updating


Syntax Definition
-----------------

cf. enclosed file "bil.ebnf"
